<rss version="2.0">
  <channel>
    <title>Tomasz Heimowski Blog</title>
    <link>http://theimowski.com/</link>
    <description>FsBlog aims to be a blog-aware static site generator, mostly built in F#. But don't worry, you won't even need to know any F# to get up and running. So long as you are comfortable using a command line or terminal, and have a degree of familiarity with Markdown and Razor syntax - you're good to go!
</description>
    <item>
      <title>Creating a tutorial from Git repo</title>
      <guid>http://theimowski.com//blog/2016/12-19-creating-a-tutorial-from-git-repo</guid>
      <link>http://theimowski.com//blog/2016/12-19-creating-a-tutorial-from-git-repo/index.html</link>
      <pubDate>Mon, 19 Dec 2016 06:50:48 GMT</pubDate>
      <description>&lt;p&gt;What if author of a programming book could maintain his content and related code in the same place?
In this entry I'll share with you my experimental idea for code-heavy F# tutorials.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Paket 'why' command</title>
      <guid>http://theimowski.com//blog/2016/10-30-paket-why-command</guid>
      <link>http://theimowski.com//blog/2016/10-30-paket-why-command/index.html</link>
      <pubDate>Sun, 30 Oct 2016 06:27:55 GMT</pubDate>
      <description>&lt;p&gt;In this entry I introduce a brand new command called &lt;strong&gt;"why"&lt;/strong&gt; in &lt;a href="http://fsprojects.github.io/Paket/"&gt;Paket&lt;/a&gt; dependency manager.
It was inspired by a recent project of Facebook, &lt;a href="https://yarnpkg.com/"&gt;Yarn&lt;/a&gt; and aims to display &lt;strong&gt;user-friendly&lt;/strong&gt; reason for a specific package to be under dependency management.
The command is available in &lt;a href="http://fsprojects.github.io/Paket/release-notes.html"&gt;Paket 3.26&lt;/a&gt;.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>F# workshop in a browser</title>
      <guid>http://theimowski.com//blog/2016/07-20-f-workshop-in-a-browser</guid>
      <link>http://theimowski.com//blog/2016/07-20-f-workshop-in-a-browser/index.html</link>
      <pubDate>Wed, 20 Jul 2016 05:17:04 GMT</pubDate>
      <description>&lt;p&gt;How to make a F# workshop for your colleagues more attractive? Let them edit your slides and interact with the browser!
This entry presents an idea of using &lt;a href="http://fsprojects.github.io/FsReveal/"&gt;FsReveal&lt;/a&gt; to combine your presentation and workshop exercises into a single file.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>XSLT - Implicit vs Explicit processing</title>
      <guid>http://theimowski.com//blog/2016/06-29-xslt-implicit-vs-explicit-processing</guid>
      <link>http://theimowski.com//blog/2016/06-29-xslt-implicit-vs-explicit-processing/index.html</link>
      <pubDate>Wed, 29 Jun 2016 05:26:11 GMT</pubDate>
      <description>&lt;p&gt;In this first of a series of posts about XSLT (hopefully to come), I'd like to share my thoughts on 2 different approaches to processing XML documents. From a shorter and &lt;strong&gt;implicit&lt;/strong&gt; version I will transit to a bit longer and &lt;strong&gt;explicit&lt;/strong&gt; transform, with the latter being easier to reason about. What are the costs of trade?&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Paket workflow for testing new NuGet package before release</title>
      <guid>http://theimowski.com//blog/2016/05-19-paket-workflow-for-testing-new-nuget-package-before-release</guid>
      <link>http://theimowski.com//blog/2016/05-19-paket-workflow-for-testing-new-nuget-package-before-release/index.html</link>
      <pubDate>Sat, 21 May 2016 06:45:31 GMT</pubDate>
      <description>&lt;p&gt;Modularity is becoming more and more popular nowadays.
Managing separately maintained components in .NET ecosystem is usually achieved by using &lt;strong&gt;NuGet&lt;/strong&gt; packages.
Unfortunately with current NuGet approach, there's no easy way of testing new changes in referenced projects.
Today I want to show you how we can make our lifes easier with brand new &lt;a href="http://fsprojects.github.io/Paket/"&gt;Paket&lt;/a&gt; feature: &lt;a href="http://fsprojects.github.io/Paket/local-file.html"&gt;paket.local&lt;/a&gt;.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Dynamic load balancing in F#</title>
      <guid>http://theimowski.com//blog/2016/04-27-dynamic-load-balancing-in-f</guid>
      <link>http://theimowski.com//blog/2016/04-27-dynamic-load-balancing-in-f/index.html</link>
      <pubDate>Wed, 27 Apr 2016 02:13:26 GMT</pubDate>
      <description>&lt;p&gt;In this short entry I'll present how one can create a small load balancer in F# to optimize distribution of a set of computations between multiple nodes.
The example will make use of powerful F# libraries:
&lt;a href="http://fsprojects.github.io/FSharp.Control.AsyncSeq/index.html"&gt;FSharp.Control.AsyncSeq&lt;/a&gt;
as well as
&lt;a href="http://fsprojects.github.io/FSharpx.Async/index.html"&gt;FSharpx.Async&lt;/a&gt;.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Dockerizing Suave Music Store on mono</title>
      <guid>http://theimowski.com//blog/2016/03-25-dockerizing-suave-music-store-on-mono</guid>
      <link>http://theimowski.com//blog/2016/03-25-dockerizing-suave-music-store-on-mono/index.html</link>
      <pubDate>Sat, 26 Mar 2016 10:06:56 GMT</pubDate>
      <description>&lt;p&gt;I've written the &lt;a href="https://theimowski.gitbooks.io/suave-music-store"&gt;Suave Music Store GitBook&lt;/a&gt;, which helped quite a few people to get started with the &lt;a href="https://suave.io/"&gt;Suave.IO&lt;/a&gt; library for creating web applications in F#.
However the original version of tutorial didn't really feel x-platform, as it was designed to work on Windows only.
I decided to revisit the tutorial and add 3 more sections describing how to convert the app to run on &lt;a href="http://www.mono-project.com/"&gt;mono&lt;/a&gt; and place inside a &lt;a href="https://www.docker.com/"&gt;Docker&lt;/a&gt; container.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Continuous delivery with FAKE, Paket and TeamCity</title>
      <guid>http://theimowski.com//blog/2016/01-18-continuous-delivery-with-fake-paket-and-teamcity</guid>
      <link>http://theimowski.com//blog/2016/01-18-continuous-delivery-with-fake-paket-and-teamcity/index.html</link>
      <pubDate>Fri, 22 Jan 2016 17:24:38 GMT</pubDate>
      <description>&lt;p&gt;Efficient continuous delivery process can speed up greatly development cycle, improve feedback loop and help to manage automatic deployments.&lt;br /&gt;
In this entry I'll present how one can configure a continuous delivery chain using combination of following tools: &lt;a href="http://fsharp.github.io/FAKE/"&gt;FAKE&lt;/a&gt;, &lt;a href="http://fsprojects.github.io/Paket/"&gt;Paket&lt;/a&gt; and &lt;a href="https://www.jetbrains.com/teamcity/"&gt;TeamCity&lt;/a&gt;.&lt;/p&gt;


</description>
    </item>
    <item>
      <title>Property-based testing XSLT</title>
      <guid>http://theimowski.com//blog/2015/12-21-property-based-testing-xslt</guid>
      <link>http://theimowski.com//blog/2015/12-21-property-based-testing-xslt/index.html</link>
      <pubDate>Mon, 21 Dec 2015 06:11:55 GMT</pubDate>
      <description>&lt;p&gt;Property-based testing is a wonderful tool to verify correctness of your programs.
However, some people struggle with finding reasonable cases to use the technique.
In this entry, I'll try to prove that property-based testing can be used in every-day coding by showing a rather &lt;strong&gt;exotic example&lt;/strong&gt; of applying property-based testing to check results of XSL transformations.&lt;/p&gt;


</description>
    </item>
  </channel>
</rss>